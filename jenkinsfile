pipeline {
    agent any
    stages{
        stage("checkout"){
            steps{
               cleanWs()
               checkout scmGit(branches: [[name: '*/${Branch_Name}']],
               userRemoteConfigs: [[url: '${Git_hub_url}']])

            }
        }
        stage("build-jar-file"){
            steps{
               sh "mvn clean"
               sh "mvn install"
            }
        }
        stage("build-the-image"){
            steps{
         sh "echo purushoth | sudo -S docker build -t ${Image_Name} ."
            //sh "sudo docker build -t ${Image_Name} ."
            }
        }
        // stage("checking-the-port"){
        //     steps{
        //         sh"sudo lsof -i:8089"
        //         script {
        //             if("true" =="true")
        //             sh"no"
        //         }
        //     }
        // }

        stage("Tag-image"){
            steps{
                sh "sudo docker tag ${Image_name} purushothshanmugam/springbootapplication:${Tag_version}"
            }
        }
        stage("push-the-image-to-dockerhub"){
            steps{
                sh"sudo docker push purushothshanmugam/springbootapplication:${Tag_version}"
            }
        }
        stage("pull the images from docker hub"){
            steps{
            sh "sudo docker pull purushothshanmugam/springbootapplication:${Tag_version} "
        }
        }

        //  stage("container-check"){
        //             steps{
        //                 sh "sudo docker run -d -p ${Container_Port}:8080 purushothshanmugam/springbootapplication:${Tag_version}"
        //                 sh "curl 172.17.0.1:8087/spring"
        //             }
        //   }

          stage("container-check") {
                steps {
                script {
                    def testExitCode = sh(script: 'sudo docker rm spring', returnStatus: true)
                    if (testExitCode == 0) {
                        sh "echo container removed successfully "
                        sh 'sudo docker run -d -p ${Container_Port}:8080 --name spring purushothshanmugam/springbootapplication:${Tag_version} '
                    } else {
                          sh "echo container start"
                         def code =sh(script:"sudo docker stop spring" ,returnStatus: true)
                         if(code == 0){
                         sh "sudo docker rm spring"
                          sh 'sudo docker run -d -p ${Container_Port}:8080 --name spring purushothshanmugam/springbootapplication:${Tag_version} '
                       }
                    }
                    }
                }
            }

            stage(" curl-command"){
                steps{
                script{

                def curl=sh(script:"/usr/bin/curl -LI 'localhost:8087/spring'", returnStatus:true)
                if(curl == 0){
                    sh "curl localhost:8087/spring"
                }
                else {
                    sh " echo not working"
                }
            }
                }
            }

    }
}